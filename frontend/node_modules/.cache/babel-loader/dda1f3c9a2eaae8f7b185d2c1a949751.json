{"ast":null,"code":"'use strict';\n\nconst Packets = require('../packets/index.js');\n\nconst caching_sha2_password = require('../auth_plugins/caching_sha2_password.js');\n\nconst mysql_native_password = require('../auth_plugins/mysql_native_password.js');\n\nconst standardAuthPlugins = {\n  caching_sha2_password: caching_sha2_password({}),\n  mysql_native_password: mysql_native_password({})\n};\n\nfunction warnLegacyAuthSwitch() {\n  console.warn('WARNING! authSwitchHandler api is deprecated, please use new authPlugins api');\n}\n\nfunction authSwitchRequest(packet, connection, command) {\n  const {\n    pluginName,\n    pluginData\n  } = Packets.AuthSwitchRequest.fromPacket(packet);\n  let authPlugin = connection.config.authPlugins && connection.config.authPlugins[pluginName]; // legacy plugin api don't allow to override mysql_native_password\n  // if pluginName is mysql_native_password it's using standard auth4.1 auth\n\n  if (connection.config.authSwitchHandler && pluginName !== 'mysql_native_password') {\n    const legacySwitchHandler = connection.config.authSwitchHandler;\n    warnLegacyAuthSwitch();\n    legacySwitchHandler({\n      pluginName,\n      pluginData\n    }, (err, data) => {\n      if (err) {\n        connection.emit('error', err);\n        return;\n      }\n\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    });\n    return;\n  }\n\n  if (!authPlugin) {\n    authPlugin = standardAuthPlugins[pluginName];\n  }\n\n  if (!authPlugin) {\n    throw new Error(`Server requests authentication using unknown plugin ${pluginName}. See ${'TODO: add plugins doco here'} on how to configure or author authentication plugins.`);\n  }\n\n  connection._authPlugin = authPlugin({\n    connection,\n    command\n  });\n  Promise.resolve(connection._authPlugin(pluginData)).then(data => {\n    if (data) {\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    }\n  });\n}\n\nfunction authSwitchRequestMoreData(packet, connection) {\n  const {\n    data\n  } = Packets.AuthSwitchRequestMoreData.fromPacket(packet);\n\n  if (connection.config.authSwitchHandler) {\n    const legacySwitchHandler = connection.config.authSwitchHandler;\n    warnLegacyAuthSwitch();\n    legacySwitchHandler({\n      pluginData: data\n    }, (err, data) => {\n      if (err) {\n        connection.emit('error', err);\n        return;\n      }\n\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    });\n    return;\n  }\n\n  if (!connection._authPlugin) {\n    throw new Error('AuthPluginMoreData received but no auth plugin instance found');\n  }\n\n  Promise.resolve(connection._authPlugin(data)).then(data => {\n    if (data) {\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    }\n  });\n}\n\nmodule.exports = {\n  authSwitchRequest,\n  authSwitchRequestMoreData\n};","map":{"version":3,"sources":["/home/marta/Dokumenty/DYPLOM/copper_shop_template/node_modules/mysql2/lib/commands/auth_switch.js"],"names":["Packets","require","caching_sha2_password","mysql_native_password","standardAuthPlugins","warnLegacyAuthSwitch","console","warn","authSwitchRequest","packet","connection","command","pluginName","pluginData","AuthSwitchRequest","fromPacket","authPlugin","config","authPlugins","authSwitchHandler","legacySwitchHandler","err","data","emit","writePacket","AuthSwitchResponse","toPacket","Error","_authPlugin","Promise","resolve","then","authSwitchRequestMoreData","AuthSwitchRequestMoreData","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Packets = require('../packets/index.js');\nconst caching_sha2_password = require('../auth_plugins/caching_sha2_password.js');\nconst mysql_native_password = require('../auth_plugins/mysql_native_password.js');\n\nconst standardAuthPlugins = {\n  caching_sha2_password: caching_sha2_password({}),\n  mysql_native_password: mysql_native_password({})\n};\n\nfunction warnLegacyAuthSwitch() {\n  console.warn(\n    'WARNING! authSwitchHandler api is deprecated, please use new authPlugins api'\n  );\n}\n\nfunction authSwitchRequest(packet, connection, command) {\n  const { pluginName, pluginData } = Packets.AuthSwitchRequest.fromPacket(\n    packet\n  );\n  let authPlugin =\n    connection.config.authPlugins && connection.config.authPlugins[pluginName];\n\n  // legacy plugin api don't allow to override mysql_native_password\n  // if pluginName is mysql_native_password it's using standard auth4.1 auth\n  if (\n    connection.config.authSwitchHandler &&\n    pluginName !== 'mysql_native_password'\n  ) {\n    const legacySwitchHandler = connection.config.authSwitchHandler;\n    warnLegacyAuthSwitch();\n    legacySwitchHandler({ pluginName, pluginData }, (err, data) => {\n      if (err) {\n        connection.emit('error', err);\n        return;\n      }\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    });\n    return;\n  }\n  if (!authPlugin) {\n    authPlugin = standardAuthPlugins[pluginName];\n  }\n  if (!authPlugin) {\n    throw new Error(\n      `Server requests authentication using unknown plugin ${pluginName}. See ${'TODO: add plugins doco here'} on how to configure or author authentication plugins.`\n    );\n  }\n  connection._authPlugin = authPlugin({ connection, command });\n  Promise.resolve(connection._authPlugin(pluginData)).then(data => {\n    if (data) {\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    }\n  });\n}\n\nfunction authSwitchRequestMoreData(packet, connection) {\n  const { data } = Packets.AuthSwitchRequestMoreData.fromPacket(packet);\n\n  if (connection.config.authSwitchHandler) {\n    const legacySwitchHandler = connection.config.authSwitchHandler;\n    warnLegacyAuthSwitch();\n    legacySwitchHandler({ pluginData: data }, (err, data) => {\n      if (err) {\n        connection.emit('error', err);\n        return;\n      }\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    });\n    return;\n  }\n\n  if (!connection._authPlugin) {\n    throw new Error(\n      'AuthPluginMoreData received but no auth plugin instance found'\n    );\n  }\n  Promise.resolve(connection._authPlugin(data)).then(data => {\n    if (data) {\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    }\n  });\n}\n\nmodule.exports = {\n  authSwitchRequest,\n  authSwitchRequestMoreData\n};\n"]},"metadata":{},"sourceType":"script"}